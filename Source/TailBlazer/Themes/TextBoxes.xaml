<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf"
    xmlns:controlzex="urn:controlzex"
    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.textbox.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <ControlTemplate x:Key="BorderOnlyValidationErrorTemplate">
        <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type ValidationError}">
                <!--<TextBlock Foreground="{DynamicResource ValidationErrorBrush}"
                               FontSize="10"
                               MaxWidth="250"
                               Margin="2"
                               TextWrapping="Wrap"
                               Text="{Binding ErrorContent}"
                               UseLayoutRounding="false" />-->
            </DataTemplate>
        </ControlTemplate.Resources>
        <StackPanel>
            <AdornedElementPlaceholder Name="Placeholder" />
            <Border
                Name="DefaultErrorViewer"
                Background="{DynamicResource MaterialDesignPaper}"
                Visibility="Collapsed">
                <ContentPresenter Content="{Binding CurrentItem}" />
            </Border>

            <controlzex:PopupEx
                x:Name="ValidationPopup"
                AllowsTransparency="True"
                IsOpen="False"
                Placement="Bottom"
                PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}">
                <Border Background="{DynamicResource MaterialDesignPaper}">
                    <ContentPresenter Content="{Binding CurrentItem}" />
                </Border>
            </controlzex:PopupEx>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Suppress)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Suppress)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="Visible" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="IsOpen" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="FloatingHintAndErrorTextBox"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.Hint" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />

        <!--<Setter Property="wpf:HintAssist.Managed" Value="{Binding RelativeSource={RelativeSource Self}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border
                            x:Name="border"
                            Padding="0,4,0,4"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <Grid
                                Margin="0,12,0,0"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ScrollViewer
                                    x:Name="PART_ContentHost"
                                    Focusable="false"
                                    HorizontalScrollBarVisibility="Hidden"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                    VerticalScrollBarVisibility="Hidden" />
                                <wpf:SmartHint
                                    x:Name="Hint"
                                    FontSize="{TemplateBinding FontSize}"
                                    Hint="{Binding Path=(wpf:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"
                                    HintOpacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                    HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                    UseFloating="{Binding Path=(wpf:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border>
                        <wpf:Underline x:Name="Underline" Visibility="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="MaterialDesignStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="MaterialDesignStateTextNotEmpty">
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Hint"
                                                Storyboard.TargetProperty="FontSize"
                                                To="10"
                                                Duration="0:0:0.3">
                                                <DoubleAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Hint"
                                                Storyboard.TargetProperty="Opacity"
                                                To="1"
                                                Duration="0:0:0.3">
                                                <DoubleAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <ThicknessAnimation
                                                Storyboard.TargetName="Hint"
                                                Storyboard.TargetProperty="(FrameworkElement.Margin)"
                                                To="1,-16,1,0"
                                                Duration="0:0:0.3">
                                                <ThicknessAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseOut" />
                                                </ThicknessAnimation.EasingFunction>
                                            </ThicknessAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="*" To="MaterialDesignStateTextEmpty">
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Hint"
                                                Storyboard.TargetProperty="FontSize"
                                                Duration="0:0:0.3">
                                                <DoubleAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Hint"
                                                Storyboard.TargetProperty="Opacity"
                                                Duration="0:0:0.3">
                                                <DoubleAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <ThicknessAnimation
                                                Storyboard.TargetName="Hint"
                                                Storyboard.TargetProperty="(FrameworkElement.Margin)"
                                                Duration="0:0:0.3">
                                                <ThicknessAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseOut" />
                                                </ThicknessAnimation.EasingFunction>
                                            </ThicknessAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="MaterialDesignStateTextNotEmpty">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Hint"
                                            Storyboard.TargetProperty="FontSize"
                                            To="10"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Hint"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                        <ThicknessAnimation
                                            Storyboard.TargetName="Hint"
                                            Storyboard.TargetProperty="(FrameworkElement.Margin)"
                                            To="1,-16,1,0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MaterialDesignStateTextEmpty">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Hint"
                                            Storyboard.TargetProperty="FontSize"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Hint"
                                            Storyboard.TargetProperty="Opacity"
                                            Duration="0" />
                                        <ThicknessAnimation
                                            Storyboard.TargetName="Hint"
                                            Storyboard.TargetProperty="(FrameworkElement.Margin)"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                        </Trigger>

                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}" />
                            <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource ValidationErrorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>